int search(int k,vector<int> inorder)
{
    for(int i=0;i<inorder.size();i++)
    {
        if(inorder[i]==k)
            return i;
    }
}
TreeNode<int> *buildBT(vector<int> &inorder,vector<int> &preorder,int infirst,int inlast,int prefirst,int prelast)
{
    if(infirst>=inlast or prefirst>=prelast)
        return NULL;
    int parent=preorder[prefirst];
    int k=search(parent,inorder);
    TreeNode<int>* parentNode=new TreeNode<int>(parent);
    int no_elements_in_left=k-infirst;
    parentNode->left=buildBT(inorder,preorder,infirst,k,prefirst+1,prefirst+no_elements_in_left+1);
    parentNode->right=buildBT(inorder,preorder,k+1,inlast,prefirst+no_elements_in_left+1,prelast);
    return parentNode;
}
TreeNode<int> *buildBinaryTree(vector<int> &inorder, vector<int> &preorder)
{
    //    Write your code here
    return buildBT(inorder,preorder,0,inorder.size(),0,preorder.size());
    
}
